#!/bin/bash

#  prepare Amber and structure factor files needed for xray3-style calculations.
#  First input is the pdb-identifier: code assumes that $1-sf.cif
#      and $1.pdb are  available in the current directory
#  Second (optional) input would be names of cif files needed by phenix.refine
#  Third  (optional) input is the space group, only helpful if it is "P1"

id=$1
echo "XrayPrep log file for id $id" > $id-prep.log
ciffiles=$2
spacegroup=$3

if true; then
#============================================================================
echo "Running phenix.AmberPrep" 
phenix.AmberPrep $id.pdb use_reduce=False >> $id-prep.log \
     || { echo "  phenix.AmberPrep:  Program error"; exit 1; }

/bin/mv 4amber_$id.order ${id}_uc.order

#============================================================================
echo "creating ${id}_uc.parm7"
# create an interactive parmed script (when run from phenix.python, will
#       have the correct PYTHONPATH)
cat <<EOF > parmed
import os
import sys
from parmed.scripts import clapp
clapp()
EOF

/bin/rm -f ${id}_uc.parm7 foo1.parm7 foo.parm7

phenix.python ./parmed -n <<EOF >> $id-prep.log \
     || { echo "  parmed:   Program error"; exit 1; }
parm 4amber_$id.prmtop
lmod
HMassRepartition
parmout foo.parm7
go
EOF

$MSANDERHOME/bin/add_pdb -i foo.parm7 -o foo2.parm7 >> $id-prep.log \
     || { echo "  add_pdb: Program error"; exit 1; }

$MSANDERHOME/bin/add_xray -i foo2.parm7 -o ${id}_uc.parm7 >> $id-prep.log \
     || { echo "  add_xray: Program error"; exit 1; }

/bin/mv 4amber_$id.rst7 ${id}_uc.rst7
fi

/bin/rm -f foo.parm7 foo2.parm7  parmed

if true; then
#============================================================================
echo "Making input mtz file"
phenix.cif_as_mtz $id-sf.cif  >> $id-prep.log \
     || { echo "  phenix.cif_as_mtz:  Program error"; exit 1; }

echo "Running zero-cycle phenix.refine, filter outliers, possibly convert I to F"
phenix.refine  \
   ${id}.pdb $id-sf.mtz $ciffiles \
   refinement.input.xray_data.r_free_flags.generate=True \
   refinement.main.number_of_macro_cycles=0 \
   xray_data.outliers_rejection=True \
   output.write_model_cif_file=False \
   prefix=cdl serial=1 \
   write_geo=False cdl=True --overwrite >> $id-prep.log \
     || { echo "  phenix.refine:  Program error"; exit 1; }

#============================================================================
if [ "x$spacegroup" != "xP1" ]; then

echo "Making the P1-sf.dat file"

phenix.reflection_file_converter cdl_001.mtz --expand_to_p1 \
    --label="F-obs-filtered,SIGF-obs-filtered" --generate_r_free_flags  \
    --r_free_flags_format=ccp4  --mtz=tmp-P1.mtz >> $id-prep.log

#  convert to formatted file:
phenix.mtz.dump -c -f s tmp-P1.mtz  | tr ',' '\t' > $id-P1.fmtz \
     || { echo "  phenix.mtz.dump:  Program error"; exit 1; }

#  make the -sf.dat file needed by xray3:
awk '{printf("%d\t%d\t%d\t%s\t%s\t%d\n", \
      $1,$2,$3,$4,$5, $6>1 ? 1 : $6)}'  $id-P1.fmtz | tail +2 > tmp.dat \
     || { echo "  awk:  Program error"; exit 1; }

nrefl=`wc -l tmp.dat | awk '{print $1}'`
echo "$nrefl 0" > $id-P1-sf.dat
cat tmp.dat >> $id-P1-sf.dat

cad hklin1 tmp-P1.mtz hklout $id-P1.mtz <<EOF >> $id-prep.log
LABIN E1=F-obs-filtered E2=SIGF-obs-filtered E3=R-free-flags
LABOUT E1=FOBS E2=SIGFOBS E3=R-free-flags
EOF

fi

#============================================================================
echo "Making the non-P1-sf.dat file"

phenix.reflection_file_converter cdl_001.mtz \
    --label="F-obs-filtered,SIGF-obs-filtered" --generate_r_free_flags  \
    --r_free_flags_format=ccp4  --mtz=tmp.mtz >> $id-prep.log

#  convert to formatted file:
phenix.mtz.dump -c -f s tmp.mtz  | tr ',' '\t' > $id.fmtz \
     || { echo "  phenix.mtz.dump:  Program error"; exit 1; }

#  make the -sf.dat file needed by xray3:
awk '{printf("%d\t%d\t%d\t%s\t%s\t%d\n", \
      $1,$2,$3,$4,$5, $6>1 ? 1 : $6)}'  $id.fmtz | tail +2 > tmp.dat \
     || { echo "  awk:  Program error"; exit 1; }

nrefl=`wc -l tmp.dat | awk '{print $1}'`
echo "$nrefl 0" > $id-sf.dat
cat tmp.dat >> $id-sf.dat

cad hklin1 tmp.mtz hklout $id.mtz <<EOF >> $id-prep.log
LABIN E1=F-obs-filtered E2=SIGF-obs-filtered E3=R-free-flags
LABOUT E1=FOBS E2=SIGFOBS E3=R-free-flags
EOF

fi

#============================================================================
if false; then
echo "Running zero-cycle phenix.refine on P1-expanded structure:"

$MSANDERHOME/bin/ambpdb -p ${id}_uc.parm7 -ext -bres < ${id}_uc.rst7 > tmp.pdb

phenix.refine  \
   tmp.pdb $id-P1.mtz $ciffiles \
   refinement.main.number_of_macro_cycles=0 \
   output.write_model_cif_file=False output.write_map_coefficients=False \
   prefix=cdl serial=2 \
   write_geo=False cdl=True --overwrite >> $id-prep.log \
     || { echo "  phenix.refine:  Program error"; exit 1; }
fi

#============================================================================
echo "Done. Created 6 files:"
echo "   ${id}_uc.parm7        Use this as the Amber prmtop file"
echo "   ${id}_uc.rst7         Starting coordinates in Amber restrt format"
echo "   ${id}_uc.pdb          Use as pdb_infile"
echo "   ${id}-sf.dat          Use as reflections_infile"
if [ "x$spacegroup" != "xP1" ]; then
   echo "   ${id}-P1-sf.dat       Use as alternate reflections_infile"
fi
echo "   ${id}-prep.log        Log file: examine this if problems arise"

#============================================================================
# clean up
/bin/rm -f tmp* $id-sf.mtz cdl_data.mtz $id.fmtz $id-P1.fmtz parmed \
     cdl_00* foo*.parm7 build_uc 4amber_$id.prmtop
