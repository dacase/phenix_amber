#!/usr/bin/perl -w

# Cycle through fortran files, determine which headers are included;
# the "used" array eliminates duplicate enties.

# Be sure do to a "make clean" before running this script!

printf <<EOF;
#
#   Please do not edit the "depend" file directly, since it is created by the
#   "makedepend" script.  If changes are needed, edit "makedepend" itself.
#
EOF

# There exist modules, for example, defined by the fortran standard.
# Ignore these for dependencies
$ignore{"intrinsic"}=$ignore{"ieee_arithmetic"}=1;

#  In order to get a mapping between module names and file names, we have
#  have to set up the following hash.
#$modulefile{"mkl_dfti"} = "mkl_fft";
$modulefile{"treecode_procedures"} = "rism3d_tree_cp";
$modulefile{"AmberNetcdf_mod"} = "AmberNetcdf";
$modulefile{"binrestart"} = "binrestart";

foreach $file ( <*.F90> ) {
    next if $file =~ /^_/;
    ($fileroot) = $file =~ /(.+)\.F90$/;
    $optimized{$fileroot} = 0;
    open( F, "$file" ) || die "unable to open $file\n";
    while ( <F> ) {
        if ( /^ *module /i ) {
            ($head,$modulename) = /( *[Mm][Oo][Dd][Uu][Ll][Ee]) +(\w*)/;
            $modulefile{$modulename} = $fileroot;
	    # printf STDERR "modulefile:  $modulename  $fileroot\n";
        }
        if ( /compile=optimized/ ) {
            $optimized{$fileroot} = 1;
        }
    }
    close( F );
}

#  Now, cycle over all source files to create the compilation rules and
#  dependencies.

foreach $file ( <*.F90> ) {

    next if $file =~ /^_/;

    $deps = "";

    ($fileroot) = $file =~ /(.+)\.F90$/;

    #  Construct the header and module dependency rules:

    open( F, "$file" ) || die "unable to open $file\n";
    while ( <F> ) {

        if ( /^ *use /i ) {
            ($head,$usee) = /( *use) +(\w*)/i;

            next if defined $ignore{$usee};
            if ( !defined $modulefile{$usee} ) {
                printf STDERR "No file name associated with module $usee\n";
                exit(1);
            }
            if ( !defined $used{ $fileroot,$modulefile{$usee} } ) {

                #  remove any circular references:
                next if $fileroot eq $modulefile{$usee};

                $deps .= "\\\n                    " . $modulefile{$usee} . ".o";
                $used{ $fileroot,$modulefile{$usee} } = 1;
            }
        }
        if (/^# *include/) {
            ($head,$included) = /(# *include) +"(.*)"/;
            next if $included eq "mpif.h";
            if ( !defined $used{ $fileroot,$included } ) {
                $deps .= "\\\n                    " . $included ;
                $used{ $fileroot,$included } = 1;
            }
        }
    }
    printDep($fileroot, "", "","");
}

#  special "compilation" rule for module object files in other places
print "binrestart.o: \n\t@(test -e \$\@ || touch \$\@)\n\n";

# Template for dependencies and build target. Automatically applies
# optimization flags, if requested.  Also allows an optional suffix and
# preprocessor flags.  This can be used to create different object
# files from the same source.
#$_[0] : Root name of the source file (no suffix)
#$_[1] : Extra suffix for the object file name. An empty string is
#        fine. Gives $fileroot${suffix}.o
#$_[2] : Additional preprocessor flags
#$_[3] : Conditional for empty object file.  This is the conditional
#        for a shell if statement.  If true, the source is compiled,
#        otherwise an empty object file is created instead. If this
#        string is empty, no conditional is built.
sub printDep {
    my $fileroot = shift;
    my $suffix = shift;
    my $flags = shift;
    my $condition = shift;
    printf "$fileroot${suffix}.o: $deps\n\n" unless $deps eq "";

    #  Construct the compilation rules:

    printf "\n$fileroot${suffix}.o:   $fileroot.F90\n";
    print "\t\@echo \[RISM\]  FC \$<\n";
    printf  "\t\$(VB)\$(FC) -c \\\n"
            ."\t\t%s \$(LOCALFLAGS) \$(FFLAGS) -o \$@ $fileroot.F90",
            ( $optimized{$fileroot}?"\$(FOPTFLAGS)":"\$(FNOOPTFLAGS)");
    printf "\n\n";
}
