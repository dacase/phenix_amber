#!/bin/bash

printf "configure script for msander\n\n"

# Store the command
command=`echo "$0 $*"`

# set up defaults:
msanderhome=`pwd`
verbose="@"
requested_help="no"
clangf=""
conda="no"
openblas="no"
moft="moft"
sfx=""
gcc10f=""
gcc10c=""
longlines="-ffree-line-length-none"
pythonv=`python --version 2>&1 | cut -c 8-10`
debug="-DNDEBUG"
fpic="-fPIC"

compiler="gnu"
cc="gcc -Wno-unused-result"
cxx="g++"
iccflags=""

fc="gfortran"
flibs_arch="-lgfortran -w"
flibs_la=""
flibs_fftw="-lfftw3"
gccsys=""
optflags="-g -Ofast -mtune=native"

yacc="bison -y"

openmp='no'
ompflag=""
ldflags=""
fftw_flags=""
mkl="no"
installtype="serial"

flibs_la="-llapack -lblas"
lapack=liblapack
blas=libblas

parmed="parmed"
pysander="pysander"
libsander="libsander"
libsanderles="libsanderles"

inc="-I$msanderhome/include"
netcdflibf_static="$msanderhome/lib/libnetcdff.a $msanderhome/lib/libnetcdf.a"
netcdflibf_shared="-L$msanderhome/lib -lnetcdff -lnetcdf"
netcdflibf=$netcdflibf_shared

#short_ene=short_ene_omp.o
short_ene=short_ene.o   # short_ene_omp may slow things down or even crash

#  process command-line flags:
for var in "$@"; do
    case "$var" in
        -h|-H|--h|--he|--hel|--help|-help)
            requested_help="yes";;
        -fullhelp|--full|--fullhelp|--full-h|--full-he|--full-hel|--full-help)
            requested_help="yes";;
        --verbose)
            verbose="";;
        --debug)
            debug="";;
        --conda)
            optflags="-g -O3"
            conda="yes";;
        --openmp)
            ompflag='-fopenmp -DOPENMP';
            flibs_fftw="-lfftw3_omp -lfftw3"
            openmp="yes";;
        --gcc10)
            gcc10f="-Wno-argument-mismatch -fallow-argument-mismatch -fno-inline-arg-packing"
            gcc10c="-fcommon";;
        --static)
            ldflags="-static";;
        --clang)
            compiler="clang"
            clangf="-DCLANG"
            cc="clang"
            cxx="clang++"
            fc="gfortran"
            optflags="-g -O3";;
        *)
            echo "Option $var not recognized"
            exit 1
    esac
done

if [ "$requested_help" = "yes" ] ; then
	printf " --clang        use clang/gfortran as compilers\n"
	printf " --gcc10        add flags for gcc10 and above\n"
    printf "\n"
	printf " --openmp       prepare for OMP build\n"
    printf "\n"
	printf " --conda        set up for a conda build, with conda-forge\n"
	printf " --verbose      give build details, otherwise be more silent\n"
	printf " --static       use static linking (experiental)\n"
    printf "\n"
    exit 0
fi

#  extra logic related to command-line arguments: generally, things
#      that need to be decided only after all arguments have been processed

if [ "$compiler" == "intel" -a "$openmp" == "yes" ]; then
  ompflag="-qopenmp -DOPENMP"
fi

#------------------------------------------------------------------------------
#  Make some needed directories:
#------------------------------------------------------------------------------
if [ ! -d bin ]; then
    mkdir bin
fi
if [ ! -d bin/x ]; then
    mkdir bin/x
fi
if [ ! -d lib ]; then
    mkdir lib
fi
if [ ! -d include ]; then
    mkdir include
fi
cp src/include/CompatibilityMacros.h include
cp src/msander/sander.h include

#------------------------------------------------------------------------------
#  Initialize variables that are architecture specific:
#------------------------------------------------------------------------------
processor=`uname -m`
if [ "$processor" = "em64t" -o "$processor" = "x86_64" ] ; then
    x86_64='yes'
else
    x86_64='no'
fi

# Determine linker type. Currently only matters for MKL
ld_version=`ld -v 2>&1 | awk '{print $1}'`
case "$ld_version" in
    *GNU*)
        gnuld='yes';;
    *)
        gnuld='no' ;;
esac

OS=`uname -s`
if [ "$OS" = "Darwin" ]; then
   is_mac='yes'
   shared_suffix=.dylib
   make_shared=-dynamiclib
   lm=
   if [ "$compiler" = 'intel' ] ; then
      optflags="-g -O3"
      iccflags="-std=c99"
   fi
else
   is_mac='no'
   shared_suffix=.so
   make_shared=-shared
   lm=-lm
fi

if [ "$conda" == "no" ]; then

#--------------------------------------------------------------------------
#  Test if the C compiler works:
#--------------------------------------------------------------------------

cat <<EOF >testp.c
#include <stdio.h>
int main()
{
   printf( "testing a C program\n" );
}
EOF

printf "Testing $cc ..."
$cc -o testp testp.c
./testp | grep "testing a C program" > /dev/null
status=$?

if [ $status -gt 0 ]; then
    printf "\nError: Unable to compile a C program using gcc\n"
    printf "       Please check your compiler settings.\n"
    exit 1
else
    printf "OK\n"
fi
/bin/rm -f testp.c testp.o testp

#--------------------------------------------------------------------------
#  Test if the Fortran compiler works:
#--------------------------------------------------------------------------

cat <<EOF >testp.f
      program testf
      write(6,*) 'testing a Fortran program'
      end program testf
EOF

printf "Testing $fc ..."
$fc -o testp testp.f
./testp | grep "testing a Fortran program" > /dev/null
status=$?

if [ $status -gt 0 ]; then
    printf "\nError: Unable to compile a Fortran program using gfortran\n"
    printf "       Please check your compiler settings.\n"
    exit 1
else
	printf "OK\n"
fi

#--------------------------------------------------------------------------
#  Test if bison is available and works
#--------------------------------------------------------------------------

  printf "Testing bison: "
  cat <<EOF >testp.y
%{
static int curItemNo, curValueNo, itemIndex;
%}
%token NUMBER
%%
term: NUMBER  { curItemNo = 1; }

%%
EOF

bison -y testp.y
status=$?

if [ $status -gt 0 ]; then
    echo ""
    echo "Error: Unable to run bison."
    echo "       Please check your PATH, or install the program."
    echo ""
    exit 1
else
    printf "OK\n\n"
fi

/bin/rm -f testp.y y.tab.c testp.f testp.o testp

fi   # end of if conda block

#--------------------------------------------------------------------------
#  Configure and build netcdf:
#--------------------------------------------------------------------------
if [ -f "lib/libnetcdf.a" ] || [ -f "${PREFIX}/lib/libnetcdf.a" ]; then
   echo "Using the existing netcdf libraries"
else
   cd src/netcdf-c-4.7.2
   printf "Configuring the NetCDF C interface..."
   make clean > /dev/null 2>&1
   if [ "$conda" == "no" ]; then
      ./configure CC="$cc" CFLAGS="-fPIC" LDFLAGS="" \
         --prefix=$msanderhome --disable-netcdf-4 --disable-dap \
         --enable-shared --disable-doxygen > ../netcdf_c.config.log 2>&1
      ncerror=$?
   else
      ./configure CC="$CC_FOR_BUILD" CFLAGS="$CFLAGS -fPIC" LDFLAGS="$LDFLAGS" \
         --prefix=$msanderhome --disable-netcdf-4 --disable-dap \
         --enable-shared --disable-doxygen > ../netcdf_c.config.log 2>&1
      ncerror=$?
   fi
   if [ $ncerror -gt 0 ]; then
       echo "Error: NetCDF configure failed!  Check netcdf_c.config.log"
       exit 1
   else
       echo "OK"
   fi
   # The NetCDF C interface MUST be present prior to configuring the
   # Fortran interface, so build it now.
   printf "Compiling the NetCDF C interface..."
   make install > ../netcdf_c.compile.log 2>&1
   if [ $? -ne 0 ]; then
       echo "Error: NetCDF compile failed!  Check netcdf_c.compile.log"
       exit 1
   else
       echo "OK"
   fi
   # NetCDF Fortran configure/build
   cd ../netcdf-fortran-4.5.2
   # The NetCDF Fortran config script will need access to the C library.
   export LD_LIBRARY_PATH="$msanderhome/lib:$LD_LIBRARY_PATH"
   printf "Configuring the NetCDF Fortran interface..."
   make clean > /dev/null 2>&1
   if [ "$conda" == "no" ]; then
      ./configure  CC="$cc" CFLAGS="-fPIC" \
                  LDFLAGS="-L$msanderhome/lib $ldflags" \
                  CPPFLAGS="-I$msanderhome/include" \
                  FC="$fc" FCFLAGS="" \
                  F77="$fc" FFLAGS="-fPIC" --enable-shared  --disable-doxygen \
                  --prefix=$msanderhome >> ../netcdf_f.config.log 2>&1
      ncerror=$?
   else
      ./configure CC="$CC_FOR_BUILD" \
                  CFLAGS="$CFLAGS -fPIC" \
                  LDFLAGS="$LDFLAGS -L$msanderhome/lib $ldflags" \
                  CPPFLAGS="$CPPFLAGS -I$msanderhome/include" \
                  FC="$FC_FOR_BUILD" \
                  FCFLAGS="$FFLAGS" \
                  FFLAGS="$FFLAGS -fPIC" --enable-shared  --disable-doxygen \
                  --prefix=$msanderhome >> ../netcdf_f.config.log 2>&1
      ncerror=$?
   fi
   if [ $ncerror -gt 0 ]; then
       echo "Error: NetCDF configure failed!  Check netcdf_f.config.log"
       exit 1
   else
       echo "OK"
   fi
   # Build the fortran interface
   printf "Compiling the NetCDF Fortran interface..."
   make install > ../netcdf_f.compile.log 2>&1
   if [ $? -ne 0 ]; then
     echo "Error: NetCDF Fortran compile failed!  Check netcdf_f.compile.log"
     exit 1
   else
       echo "OK"
   fi
   cd ../..
fi

#--------------------------------------------------------------------------
#  Configure and build FFTW3:
#--------------------------------------------------------------------------
if [ "$flibs_fftw" != "" ]; then
    if [ -f "lib/libfftw3.a" ] || \
       [ -f "${PREFIX}/lib/libfftw3.a" ] || \
       [ "$openmp" == "yes" -a -f "lib/libfftw3_omp.a" ]; then
       echo "Using the existing fftw3  libraries"
    else
       if [ "$openmp" == "no" ]; then
          enableomp=""
       else
          enableomp="--enable-openmp"
       fi

       # enable_sse="--enable-sse=no --enable-sse2=no --enable-avx=no"
       enable_sse="--enable-sse2=yes --enable-avx=yes"

       if [ "$conda" == "yes" ]; then
          printf "\nConfiguring fftw-3.3 with $CC and $FC..."
          cd src/fftw-3.3 && \
              ./configure --disable-doc --prefix=$msanderhome \
              --libdir=$msanderhome/lib $enableomp $fftw_flags \
              --enable-static $enable_sse  \
              CC="$CC_FOR_BUILD" \
              FC="$FC_FOR_BUILD" \
              CFLAGS="$CFLAGS $optflags -fPIC"  \
              FFLAGS="$FFLAGS $optflags -fPIC"  \
              FLIBS="$flibs_arch"  > fftw3_config.log 2>&1
            ncerror=$?
          if [ $ncerror -gt 0 ]; then
              echo "Error: FFTW configure returned $ncerror"
              exit 1
          else
              echo "OK"
          fi
       else
          # DAC note, 12/18/19: adding -gcc-sys to CFLAGS below seems to
          #   be required for Intel compilers.
          printf "\nConfiguring fftw-3.3 with $cc and $fc..."
          cd src/fftw-3.3 && \
              ./configure --disable-doc --prefix=$msanderhome \
              --libdir=$msanderhome/lib $enableomp $fftw_flags \
              --enable-static $enable_sse \
              CC="$cc" CFLAGS="$gccsys $optflags -fPIC"  \
              F77="$fc" FFLAGS="$optflags -fPIC" \
              FLIBS="$flibs_arch"  > fftw3_config.log 2>&1
            ncerror=$?
          if [ $ncerror -gt 0 ]; then
              echo "Error: FFTW configure returned $ncerror"
              exit 1
          else
              echo "OK"
          fi
       fi

       # Build FFTW3
       printf "Compiling the FFTW3 interface..."
       make install > fftw3.compile.log 2>&1
       if [ $? -ne 0 ]; then
         printf "\nError: FFTW3 compile failed.\n"
         exit 1
       else
         printf "OK\n"
      fi
      cd ../..
   fi
fi

#--------------------------------------------------------------------------
#  create the config.h file: may differ for different subsets
#--------------------------------------------------------------------------

if [ "$conda" == "yes" ]; then

cat <<EOF > config.h

#  msander configuration file.
#  Created on `date` via $command
EOF

else

cat <<EOF > config.h

#  msander configuration file.
#  Created on `date` via $command

CC=$cc
CXX=$cxx
FC=$fc
LDFLAGS=$ldflags
YACC=$yacc

EOF

fi

if [ "$conda" == "yes" ]; then

cat <<EOF >> config.h

###############################################################################

# (1)  Location of the installation

AMBERTOOLS=msander
BASEDIR=$msanderhome
BINDIR=\$(BASEDIR)/bin
LIBDIR=\$(BASEDIR)/lib
INCDIR=\$(BASEDIR)/include
DATDIR=\$(BASEDIR)/dat
LOGDIR=\$(BASEDIR)/logs

###############################################################################

#  (2) Flags that depend on OS type

SHARED_SUFFIX=$shared_suffix
MAKE_SHARED=$make_shared
LM=$lm

###############################################################################

#  (3) allow for the use of netcdf

NETCDFLIBF=$netcdflibf

LAPACK=$lapack
BLAS=$blas

###############################################################################

#  (4)  C compiler

CFLAGS=$CFLAGS $clangf $inc $gcc10c $ompflag $iccflags $fpic $debug
CNOOPTFLAGS=-g -O0
COPTFLAGS=$optflags

###############################################################################

#  (5)  Fortran compiler

FFLAGS=$FFLAGS $clangf $inc $ompflag $gcc10f $fpic $longlines
FLIBSF=-lrism -lsqm -larpack $flibs_fftw $flibs_la
FNOOPTFLAGS= -O0 -g
FOPTFLAGS=$optflags
SHORT_ENE=$short_ene

###############################################################################

#  (6)  other flags:

AR=    ar rv
RANLIB=$RANLIB
MV=mv
CP=cp
MAKE=make --no-print-directory
SFX=$sfx
VB=$verbose
INSTALLTYPE=$installtype

MOFT=$moft

# PLUMED related variables:
PLUMED_INCLUDE_FILE=
PLUMED_LOAD=Plumed.o
PLUMED_DEPENDENCIES=Plumed.o

#Python interpreter we are using and install options
#   assumes python in the path is the version we want
PYTHON=python
PYTHON_INSTALL=--prefix=\$(BASEDIR)
PYTHONPATH=\$(BASEDIR)/lib/python${pythonv}/site-packages
PARMED=$parmed
PYSANDER=$pysander
LIBSANDER=$libsander
LIBSANDERLES=$libsanderles

EOF

else

cat <<EOF >> config.h

###############################################################################

# (1)  Location of the installation

AMBERTOOLS=msander
BASEDIR=$msanderhome
BINDIR=\$(BASEDIR)/bin
LIBDIR=\$(BASEDIR)/lib
INCDIR=\$(BASEDIR)/include
DATDIR=\$(BASEDIR)/dat
LOGDIR=\$(BASEDIR)/logs

###############################################################################

#  (2) Flags that depend on OS type

SHARED_SUFFIX=$shared_suffix
MAKE_SHARED=$make_shared
LM=$lm

###############################################################################

#  (3) allow for the use of netcdf

NETCDFLIBF=$netcdflibf

LAPACK=$lapack
BLAS=$blas

###############################################################################

#  (4)  C compiler

CFLAGS=$clangf $inc $gcc10c $ompflag $iccflags $fpic $debug
CNOOPTFLAGS=-g -O0
COPTFLAGS=$optflags

###############################################################################

#  (5)  Fortran compiler

FFLAGS=$clangf $inc $ompflag $gcc10f $fpic $longlines
FLIBSF=-lrism -lsqm -larpack $flibs_fftw $flibs_la
FNOOPTFLAGS= -O0 -g
FOPTFLAGS=$optflags
SHORT_ENE=$short_ene

###############################################################################

#  (6)  other flags:

AR=    ar rv
RANLIB=ranlib
MV=mv
CP=cp
MAKE=make --no-print-directory
SFX=$sfx
VB=$verbose
INSTALLTYPE=$installtype

MOFT=$moft

# PLUMED related variables:
PLUMED_INCLUDE_FILE=
PLUMED_LOAD=Plumed.o
PLUMED_DEPENDENCIES=Plumed.o

#Python interpreter we are using and install options
#   assumes python in the path is the version we want
PYTHON=python
PYTHON_INSTALL=--prefix=\$(BASEDIR)
PYTHONPATH=\$(BASEDIR)/lib/python${pythonv}/site-packages
PARMED=$parmed
PYSANDER=$pysander
LIBSANDER=$libsander
LIBSANDERLES=$libsanderles

EOF


printf "\nThe next step is to type 'make clean && make install'\n\n"

exit 0
