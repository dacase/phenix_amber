#!/bin/bash

printf "configure script for msander\n\n"

# Store the command
command=`echo "$0 $*"`

# set up defaults:
msanderhome=`pwd`
verbose="@"
requested_help="no"
clangf=""
conda="no"
conda_incflags=""
openblas="no"
moft="moft"
sfx=""
gcc10f=""
gcc10c=""
longlines="-ffree-line-length-none"
pythonv=`python --version 2>&1 | cut -c 8-10`
debug="-DNDEBUG"
fpic="-fPIC"

compiler="gnu"
cc="gcc -Wno-unused-result"
cxx="g++"
iccflags=""

fc="gfortran"
flibs_arch="-lgfortran -w"
flibs_la=""
gccsys=""
optflags="-g -Ofast -mtune=native"

yacc="bison -y"

openmp='no'
ompflag=""
ldflags=""
mkl="no"
installtype="serial"

flibs_la="-llapack -lblas"
lapack=liblapack
blas=libblas

parmed="parmed"
pysander="pysander"
libsander="libsander"
libsanderles="libsanderles"

inc="-I$msanderhome/include"

short_ene=short_ene.o   # short_ene_omp may slow things down or even crash

#  process command-line flags:
for var in "$@"; do
    case "$var" in
        -h|-H|--h|--he|--hel|--help|-help)
            requested_help="yes";;
        -fullhelp|--full|--fullhelp|--full-h|--full-he|--full-hel|--full-help)
            requested_help="yes";;
        --verbose)
            verbose="";;
        --debug)
            debug="";;
        --conda)
            conda_incflags="-I$CONDA_PREFIX/include"
            clangf="-DCLANG"
            clangflags="-Wno-parentheses"
            installtype="conda"
            cc=$CC
            cxx=$CXX
            fc=$FC
            ldflags=$LDFLAGS
            arpack="skip"
            conda="yes";;
        --openmp)
            ompflag='-fopenmp -DOPENMP';
            openmp="yes";;
        --gcc10)
            gcc10f="-Wno-argument-mismatch -fallow-argument-mismatch -fno-inline-arg-packing"
            gcc10c="-fcommon";;
        --static)
            ldflags="-static";;
        --clang)
            compiler="clang"
            clangf="-DCLANG"
            cc="clang"
            cxx="clang++"
            fc="gfortran"
            optflags="-g -O3";;
        *)
            echo "Option $var not recognized"
            exit 1
    esac
done

if [ "$requested_help" = "yes" ] ; then
	printf " --clang        use clang/gfortran as compilers\n"
	printf " --gcc10        add flags for gcc10 and above\n"
    printf "\n"
	printf " --openmp       prepare for OMP build\n"
    printf "\n"
	printf " --conda        set up for a conda build, with conda-forge\n"
	printf " --verbose      give build details, otherwise be more silent\n"
	printf " --static       use static linking (experiental)\n"
    printf "\n"
    exit 0
fi

#  extra logic related to command-line arguments: generally, things
#      that need to be decided only after all arguments have been processed

if [ "$compiler" == "intel" -a "$openmp" == "yes" ]; then
  ompflag="-qopenmp -DOPENMP"
fi

#------------------------------------------------------------------------------
#  Make some needed directories:
#------------------------------------------------------------------------------
if [ ! -d bin ]; then
    mkdir bin
fi
if [ ! -d bin/x ]; then
    mkdir bin/x
fi
if [ ! -d lib ]; then
    mkdir lib
fi
if [ ! -d include ]; then
    mkdir include
fi
cp src/include/CompatibilityMacros.h include
cp src/msander/sander.h include

#------------------------------------------------------------------------------
#  Initialize variables that are architecture specific:
#------------------------------------------------------------------------------
processor=`uname -m`
if [ "$processor" = "em64t" -o "$processor" = "x86_64" ] ; then
    x86_64='yes'
else
    x86_64='no'
fi

# Determine linker type. Currently only matters for MKL
ld_version=`ld -v 2>&1 | awk '{print $1}'`
case "$ld_version" in
    *GNU*)
        gnuld='yes';;
    *)
        gnuld='no' ;;
esac

OS=`uname -s`
if [ "$OS" = "Darwin" ]; then
   is_mac='yes'
   shared_suffix=.dylib
   make_shared=-dynamiclib
   lm=
   if [ "$compiler" = 'intel' ] ; then
      optflags="-g -O3"
      iccflags="-std=c99"
   fi
else
   is_mac='no'
   shared_suffix=.so
   make_shared=-shared
   lm=-lm
fi

#--------------------------------------------------------------------------
#  Configure the linear algebra libraries:
#--------------------------------------------------------------------------

   echo "using OpenBLAS libraries from conda-forge"
   echo "using arpack   libraries from conda-forge"
   flibs_la="-L$CONDA_PREFIX/lib -lopenblas -larpack -lpthread"
   blas="skip"
   lapack="skip"
   arpack="skip"

#--------------------------------------------------------------------------
#  Configure netcdf:
#--------------------------------------------------------------------------

   netcdflibf="-L$CONDA_PREFIX/lib -lnetcdff -lnetcdf"
   echo "using netcdf   libraries from conda-forge"

#--------------------------------------------------------------------------
#  create the config.h file: may differ for different subsets
#--------------------------------------------------------------------------

cat <<EOF > config.h

#  msander configuration file.
#  Created on `date` via $command

###############################################################################

# (1)  Location of the installation

AMBERTOOLS=msander
BASEDIR=$msanderhome
BINDIR=\$(BASEDIR)/bin
LIBDIR=\$(BASEDIR)/lib
INCDIR=\$(BASEDIR)/include
DATDIR=\$(BASEDIR)/dat
LOGDIR=\$(BASEDIR)/logs

###############################################################################

#  (2) Flags that depend on OS type

SHARED_SUFFIX=$shared_suffix
MAKE_SHARED=$make_shared
LM=$lm

###############################################################################

#  (3) specify library options:

NETCDFLIBF=$netcdflibf
LAPACK=$lapack
BLAS=$blas
ARPACK=$arpack

###############################################################################

#  (4)  C compiler

CFLAGS=$clangf $inc $gcc10c $ompflag $iccflags $fpic $debug $conda_incflags
CNOOPTFLAGS=-g -O0
COPTFLAGS=$optflags

###############################################################################

#  (5)  Fortran compiler

FFLAGS=$clangf $inc $ompflag $gcc10f $fpic $longlines $conda_incflags
FLIBSF=-lsqm -larpack $flibs_la $netcdflibf
FNOOPTFLAGS= -O0 -g
FOPTFLAGS=$optflags
SHORT_ENE=$short_ene

###############################################################################

#  (6)  other flags:

AR=    ar rv
RANLIB=ranlib
MV=mv
CP=cp
MAKE=make --no-print-directory
SFX=$sfx
VB=$verbose
INSTALLTYPE=$installtype

#Python interpreter we are using and install options
#   assumes python in the path is the version we want
PYTHON=python
PYTHON_INSTALL=--prefix=\$(BASEDIR)
PYTHONPATH=\$(BASEDIR)/lib/python${pythonv}/site-packages
PARMED=$parmed
PYSANDER=$pysander
LIBSANDER=$libsander
LIBSANDERLES=$libsanderles

EOF


printf "\nThe next step is to type 'make clean && make install'\n\n"

exit 0
